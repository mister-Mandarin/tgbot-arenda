from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from keyboards.reservation import menu_hall_check, menu_hall_time, menu_hall_confirm
from aiogram.fsm.state import StatesGroup, State
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from aiogram.filters.callback_data import CallbackData
from services.helpers import LIST_HALLS, get_state
from datetime import date, datetime
from services.time_slots import generate_free_time_start, generate_free_time_end
from .callback_factory import SelectTimeStartCallback, SelectTimeEndCallback
from keyboards.reservation import menu_hall_change_date
from db.user import get_user
from keyboards.menu import menu_main
from handlers.admin import notify_admins

router = Router()
now = datetime.now()
_calendar_cache: dict[date, InlineKeyboardMarkup] = {}

class StateReservation(StatesGroup):
    hall = State()
    date = State()
    clear_buzy_time = State()
    free_time_start = State()
    free_time_end = State()
    time_start = State()
    time_end = State()
    reservation_text = State()

'''
–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
'''
async def process_time_start(callback: CallbackQuery, state: FSMContext):
    data = await get_state(state, 'free_time_start')
    await callback.message.answer((
                            f'3/4 üîµüîµüîµ‚ö™\n\n'
                            f'–í—Ä–µ–º—è –≤–∞–º –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —É—á—ë—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:\n'
                            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 1 —á–∞—Å. üïê\n'
                            f'–¶–µ–Ω—Ç—Ä —Ä–∞–±–æ—Ç–∞ —Å 10:00 –¥–æ 22:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n'
                            f'–í –æ–¥–Ω–æ–º –∑–∞–ª–µ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è –º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n'
                            f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üëá\n'
                        ), reply_markup = menu_hall_time(data))

async def process_time_end(callback: CallbackQuery, state: FSMContext):
    data = await get_state(state,'free_time_end')
    await callback.message.answer((
                            f'4/4 üîµüîµüîµüîµ\n\n'
                            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üëá'
                        ), reply_markup=menu_hall_time(data, is_end=True))
    await state.set_state(StateReservation.time_end)

async def show_reservation_summary(callback: CallbackQuery, state: FSMContext):
    data = await get_state(state)
    user_data = get_user(callback.from_user.id)

    text = (
        "<b>–í–∞—à–∞ –±—Ä–æ–Ω—å:</b>\n"
        f"üèõÔ∏è –ó–∞–ª: <b>{data.get('hall', {}).get('name', '-')}</b>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{data.get('date', '‚Äî')}</b>\n"
        f"üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{data.get('time_start', '‚Äî')}</b>\n"
        f"üïî –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{data.get('time_end', '‚Äî')}</b>\n"
        f"\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n"
        f"üßë –ò–º—è: {user_data['first_name']}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {user_data['last_name'] or '-'}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone'] or '-'}\n"
        f"üìõ –ù–∏–∫–Ω–µ–π–º: @{user_data['username'] if user_data['username'] else '-'}\n"
    )

    await state.update_data(reservation_text=text)
    await callback.message.answer(text, parse_mode="HTML", reply_markup=menu_hall_confirm)

'''
–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–∞–º–∏
'''
async def calendar_markup() -> InlineKeyboardMarkup:
    today = date.today()

    if today in _calendar_cache:
        return _calendar_cache[today]

    calendar = await SimpleCalendar().start_calendar()
    _calendar_cache[today] = calendar

    return calendar
    
'''
–í—ã–±–æ—Ä –¥–∞—Ç—ã. –ö–∞–ª–µ–Ω–¥–∞—Ä—å
'''
@router.message(F.text == "üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É")
async def process_date(update: CallbackQuery | Message, state: FSMContext):
    calendar = await calendar_markup()

    if isinstance(update, Message):
        await update.answer(f'2/4 üîµüîµ‚ö™‚ö™\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ', reply_markup=calendar)

    if isinstance(update, CallbackQuery):
        await update.message.answer(f'2/4 üîµüîµ‚ö™‚ö™\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ', reply_markup=calendar)
    
    await state.set_state(StateReservation.date)

'''
–í—ã–±–æ—Ä –∑–∞–ª–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–Ω–æ–ø–∫–∏
'''
@router.message(F.text.in_(["üìã –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ª", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å"]))
async def show_profile(message: Message, state: FSMContext):
    await message.answer("üìã –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ª–∞.", reply_markup=ReplyKeyboardRemove())
    await message.answer(f'1/4 üîµ‚ö™‚ö™‚ö™\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª: üëá', reply_markup=menu_hall_check)
    await state.set_state(StateReservation.hall)

'''
–ó–∞–ø–∏—Å—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞
'''
@router.callback_query(F.data.startswith("check_"))
async def choose_hall(callback: CallbackQuery, state: FSMContext):
    hall_alias = callback.data.replace("check_", "")
    hall = [h for h in LIST_HALLS if h["alias"] == hall_alias][0]

    await callback.message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ª: " + hall["name"])
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(hall=hall)
    await process_date(callback, state)

'''
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
'''
@router.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    calendar = SimpleCalendar()

    calendar.set_dates_range(datetime.now(), datetime(now.year + 1, now.month, now.day))
    selected, selected_date = await calendar.process_selection(callback_query, callback_data)

    if selected:
        data = await get_state(state, "hall")

        date = selected_date.strftime("%Y-%m-%d")
        free_time_start, clear_buzy_time = generate_free_time_start(data["alias"], date)

        if len(free_time_start) == 0:
            await callback_query.answer(
                f'‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è\n'
                f'–£–ø—Å... –ù–∞ —ç—Ç–∏ –¥–∞—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ—Ç.\n\n'
                f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É üëá',
                show_alert=True
            )
            calendar = await calendar_markup()
            await callback_query.message.edit_text(
                f'2/4 üîµüîµ‚ö™‚ö™\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:',
                reply_markup=calendar
            )
            return
        
        await state.update_data(date=date)
        await callback_query.message.answer(f'‚úÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {date}', reply_markup=menu_hall_change_date)
        await state.update_data(free_time_start=free_time_start, clear_buzy_time=clear_buzy_time)
        await process_time_start(callback_query, state)

@router.callback_query(SelectTimeStartCallback.filter())
async def handle_time_selected(callback: CallbackQuery, callback_data: SelectTimeStartCallback, state: FSMContext):
    selected_time = callback_data.value.replace("-", ":")
    await state.update_data(time_start=selected_time)

    data = await get_state(state, "clear_buzy_time")
    free_time_end = generate_free_time_end(selected_time, data)

    await state.update_data(free_time_end=free_time_end)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {selected_time}")
    await process_time_end(callback, state)

@router.callback_query(SelectTimeEndCallback.filter())
async def handle_time_selected(callback: CallbackQuery, callback_data: SelectTimeEndCallback, state: FSMContext):
    selected_time = callback_data.value.replace("-", ":")
    await state.update_data(time_end=selected_time)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä–µ—à–Ω–∏—è: {selected_time}")
    await show_reservation_summary(callback, state)

'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞
'''
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=menu_main
    )


'''
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
'''
@router.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def confirm_reservation(message: Message, state: FSMContext):
    await message.answer(
        '‚úÖ –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n'
        'üìû –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –ê–ª—å—Ñ–∞-–ó–µ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. üòä',
        reply_markup=menu_main
    )

    await notify_admins(message, state)

    await state.clear()