import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from keyboards.reservation import menu_hall_check, menu_hall_time
from aiogram.fsm.state import StatesGroup, State
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, get_user_locale
from aiogram.filters.callback_data import CallbackData
from services.helpers import LIST_HALLS
from datetime import datetime
from services.time_slots import generate_free_time_start, generate_free_time_end
from .callback_factory import SelectTimeStartCallback, SelectTimeEndCallback

router = Router()
now = datetime.now()

class StateReservation(StatesGroup):
    hall = State()
    date = State()
    clear_buzy_time = State()
    free_time_start = State()
    free_time_end = State()
    time_start = State()
    time_end = State()

async def process_time_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    await callback.message.answer((
                            f'3/4 üîµüîµüîµ‚ö™\n\n'
                            f'–í—Ä–µ–º—è –≤–∞–º –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å —É—á—ë—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:\n'
                            f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è 1 —á–∞—Å. üïê\n'
                            f'–¶–µ–Ω—Ç—Ä —Ä–∞–±–æ—Ç–∞ —Å 10:00 –¥–æ 22:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n'
                            f'–í –æ–¥–Ω–æ–º –∑–∞–ª–µ –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è–º–æ–∂–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n'
                            f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üëá\n'
                        ), reply_markup = menu_hall_time(data["free_time_start"]))

async def process_time_end(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.answer((
                            f'4/4 üîµüîµüîµüîµ\n\n'
                            f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è üëá'
                        ), reply_markup=menu_hall_time(data['free_time_end'], is_end=True))
    await state.set_state(StateReservation.time_end)

async def show_reservation_summary(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = (
        "üìù <b>–í–∞—à–∞ –±—Ä–æ–Ω—å:</b>\n"
        f"üèõÔ∏è –ó–∞–ª: <b>{data['hall']['name']}</b>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{data.get('date', '‚Äî')}</b>\n"
        f"üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{data.get('time_start', '‚Äî')}</b>\n"
        f"üïî –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{data.get('time_end', '‚Äî')}</b>\n"
    )
    await callback.message.answer(text, parse_mode="HTML")

@router.message(F.text == "üìã –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ª")
async def show_profile(message: Message,state: FSMContext):
    await message.answer("üìã –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ª–∞.\n\n–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏—è –±—Ä–æ–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    await message.answer(f'1/4 üîµ‚ö™‚ö™‚ö™\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: üëá', reply_markup=menu_hall_check)
    await state.set_state(StateReservation.hall)

@router.callback_query(F.data.startswith("check_"))
async def choose_hall(callback: CallbackQuery, state: FSMContext):
    hall_alias = callback.data.replace("check_", "")
    hall = [h for h in LIST_HALLS if h["alias"] == hall_alias][0]

    await callback.message.answer("‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ª: " + hall["name"])
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.update_data(hall=hall)
    calendar = await SimpleCalendar(locale=await get_user_locale(callback.from_user)).start_calendar()

    await callback.message.answer(f'2/4 üîµüîµ‚ö™‚ö™\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É: ',
        reply_markup=calendar
    )
    await state.set_state(StateReservation.date)

@router.callback_query(SimpleCalendarCallback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    calendar = SimpleCalendar(locale=await get_user_locale(callback_query.from_user))
    
    calendar.set_dates_range(datetime.now(), datetime(now.year + 1, now.month, now.day))
    selected, date = await calendar.process_selection(callback_query, callback_data)

    if selected:
        date = date.strftime("%Y-%m-%d")
        await state.update_data(date=date)
        await callback_query.message.answer(f'‚úÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {date}')
        data = await state.get_data()
        free_time_start, clear_buzy_time = generate_free_time_start(data["hall"]["alias"], date)
        
        await state.update_data(free_time_start=free_time_start, clear_buzy_time=clear_buzy_time)
        await process_time_start(callback_query, state)

@router.callback_query(SelectTimeStartCallback.filter())
async def handle_time_selected(callback: CallbackQuery, callback_data: SelectTimeStartCallback, state: FSMContext):
    selected_time = callback_data.value.replace("-", ":")
    await state.update_data(time_start=selected_time)
    data = await state.get_data()
    free_time_end = generate_free_time_end(selected_time, data["clear_buzy_time"])

    await state.update_data(free_time_end=free_time_end)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {selected_time}")
    await process_time_end(callback, state)


@router.callback_query(SelectTimeEndCallback.filter())
async def handle_time_selected(callback: CallbackQuery, callback_data: SelectTimeEndCallback, state: FSMContext):
    selected_time = callback_data.value.replace("-", ":")
    await state.update_data(time_end=selected_time)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä–µ—à–Ω–∏—è: {selected_time}")
    await show_reservation_summary(callback, state)